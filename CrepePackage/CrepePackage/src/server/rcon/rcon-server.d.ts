/** Declaration file generated by dts-gen */
import { EventEmitter } from "events";

declare module "rcon-server" {
    export class RCONServer extends EventEmitter {
        constructor(obj: {
            port: number = 3839,
            host: string = "127.0.0.1",
            password: string = "password",
            clientLimit: number = 1,
            destroySocketOnLimitExceeded: boolean = true,
            emitAdvancedEvents: boolean = false
        });

        connect(...args: any[]): void;

        getConnectedSockets(...args: any[]): void;

        getServerSettings(...args: any[]): void;

        getSocketServer(...args: any[]): void;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static getEventListeners(emitterOrTarget: any, type: any): any;

        static init(opts: any): void;

        static kMaxEventTargetListeners: any;

        static kMaxEventTargetListenersWarned: any;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any, options: any): any;

        static once(emitter: any, name: any, options: any): any;

        static setMaxListeners(n: any, eventTargets: any): void;

        static usingDomains: boolean;

    }

    export namespace RCONServer {
        class EventEmitter {
            constructor(opts: any);

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class EventEmitterAsyncResource {
            constructor(...args: any[]);

            emit(...args: any[]): void;

            emitDestroy(...args: any[]): void;

            static EventEmitterAsyncResource: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        namespace EventEmitter {
            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

        namespace EventEmitterAsyncResource {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

    }
}